#!/usr/bin/env bash

# Usage:
#  ./build_dockers.bsh - Build all the compiling docker images
#  ./build_dockers.bsh debian_11 debian_12 - Build only Debian 11 & 12 images
set -eu

CUR_DIR=$(dirname "${BASH_SOURCE[0]}")

GOLANG_ARCH="amd64"
while [ -n "${1-}" ]
do
  case "$1" in
    --arch=*)
      GOLANG_ARCH="${1#--arch=}"
      shift
      ;;
    *)
      break
      ;;
  esac
done

: ${GOLANG_VERSION:=1.24.1}
case "$GOLANG_ARCH" in
  amd64)
    : ${GOLANG_SHA256:=cb2396bae64183cdccf81a9a6df0aea3bce9511fc21469fb89a0c00470088073}
    ;;
  arm64)
    : ${GOLANG_SHA256:=8df5750ffc0281017fb6070fba450f5d22b600a02081dceef47966ffaf36a3af}
    ;;
esac
export GOLANG_VERSION GOLANG_SHA256 GOLANG_ARCH

#If you are not in docker group and you have sudo, default value is sudo
: ${SUDO=`if ( [ ! -w /var/run/docker.sock ] && id -nG | grep -qwv docker && [ "${DOCKER_HOST:+dh}" != "dh" ] ) && which sudo > /dev/null 2>&1; then echo sudo; fi`}
export SUDO

PARALLEL=
if [[ ${1:-} = -j ]]; then
  PARALLEL=t
  shift
fi

if [[ $# == 0 ]]; then
  IMAGE_NAMES=($(ls -d ${CUR_DIR}/*.Dockerfile))
else
  IMAGE_NAMES=("${@}")
fi

#This will take a long time the first time
if [[ -n $PARALLEL ]]; then
  printf "%s\n" ${IMAGE_NAMES[@]} | parallel --line-buffer -I{} "$CUR_DIR/build_one" {}
else
  for IMAGE_NAME in "${IMAGE_NAMES[@]}"; do
    "$CUR_DIR/build_one" "$IMAGE_NAME"
  done
fi
